import org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpack

plugins {
    kotlin("multiplatform") version "1.9.0"
    application
    kotlin("plugin.serialization") version "1.8.21"
}

group = "club.dmpsy"
version = "1.0"

repositories {
    mavenCentral()
    maven("https://maven.pkg.jetbrains.space/public/p/kotlinx-html/maven")
}

kotlin {
    jvm {
        jvmToolchain(17)
        withJava()
        testRuns.named("test") {
            executionTask.configure {
                useJUnitPlatform()
            }
        }
    }
    js {
        browser {
            binaries.executable()
        }
        //DM binaries.executable()
        //DM browser {
        //DM     commonWebpackConfig {
        //DM        cssSupport {
        //DM            enabled.set(true)
        //DM        }
        //DM    }
        //DM}
    }
    sourceSets {
        val commonMain by getting {
            dependencies {
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1")
                implementation("io.ktor:ktor-client-core:2.3.2")
            }
        }
        val commonTest by getting {
            dependencies {
                implementation(kotlin("test"))
            }
        }
        val jvmMain by getting {
            dependencies {
                implementation("io.ktor:ktor-server-html-builder-jvm:2.3.2")
                implementation("org.jetbrains.kotlinx:kotlinx-html-jvm:0.7.2")
                implementation("io.ktor:ktor-serialization:2.3.2")
                implementation("io.ktor:ktor-server-content-negotiation:2.3.2")
                implementation("io.ktor:ktor-serialization-kotlinx-json:2.3.2")
                implementation("io.ktor:ktor-server-cors:2.3.2")
                implementation("io.ktor:ktor-server-compression:2.3.2")
                implementation("io.ktor:ktor-server-core-jvm:2.3.2")
                implementation("io.ktor:ktor-server-netty:2.3.2")
                implementation("ch.qos.logback:logback-classic:1.2.11")
                implementation("org.litote.kmongo:kmongo-coroutine-serialization:4.5.0")
            }
        }
        val jvmTest by getting
        val jsMain by getting {
            dependencies {
                implementation("io.ktor:ktor-client-js:2.3.2")
                implementation("io.ktor:ktor-client-content-negotiation:2.3.2")
                implementation("io.ktor:ktor-serialization-kotlinx-json:2.3.2")
                implementation(project.dependencies.enforcedPlatform("org.jetbrains.kotlin-wrappers:kotlin-wrappers-bom:1.0.0-pre.561"))                
                implementation("org.jetbrains.kotlin-wrappers:kotlin-react:18.2.0-pre.346")
                implementation("org.jetbrains.kotlin-wrappers:kotlin-react-dom:18.2.0-pre.346")
                implementation("org.jetbrains.kotlin-wrappers:kotlin-emotion:11.9.3-pre.346")
            }
        }
        val jsTest by getting
    }
}

application {
    mainClass.set("ServerKt")
}

// include JS artifacts in any generated JAR
//DMtasks.named<Jar>("jvmJar").configure {
//DM    val taskName = if (project.hasProperty("isProduction")
//DM        || project.gradle.startParameter.taskNames.contains("installDist")
//DM    ) {
//DM        "jsBrowserProductionWebpack"
//DM    } else {
//DM        "jsBrowserDevelopmentWebpack"
//DM    }
//DM    //val webpackTask = tasks.named<KotlinWebpack>(taskName)
//DM    //dependsOn(webpackTask) //make sure JS gets compiled first
//DM    //from(webpackTask.map { File(it.destinationDirectory, it.outputFileName) })
//DM    val webpackTask = tasks.getByName<KotlinWebpack>(taskName)
//DM    dependsOn(webpackTask) // make sure JS gets compiled first
//DM    //from(File(webpackTask.destinationDirectory, webpackTask.outputFileName)) // bring output file along into the JAR
//DM    from(File(webpackTask.destinationDirectory, webpackTask.outputFileName)) // bring output file along into the JAR
//DM}

tasks.named<Copy>("jvmProcessResources") {
    val jsBrowserDistribution = tasks.named("jsBrowserDistribution")
    from(jsBrowserDistribution)
}

tasks.named<JavaExec>("run") {
    dependsOn(tasks.named<Jar>("jvmJar"))
    classpath(tasks.named<Jar>("jvmJar")) // so that the JS artifacts generated by `jvmJar` can be found and served
}
